%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 core) hs module {%{EH}CoreCPS.Trf.Inline} import({%{EH}CoreCPS}, {%{EH}Ty}, qualified Data.Map.Strict as Map, {%{EH}Base.HsName}, Data.Maybe, qualified Data.Set as Set)
%%]

%%[(8 core).WRAPPER ag import({CoreCPS/AbsSyn}, {CoreCPS/CommonFV})
WRAPPER CTm
%%]

%%[(8 core) hs export(ctmTrfInline)
ctmTrfInline :: CTm -> CTm
ctmTrfInline ctm
  = let t = wrap_CTm (sem_CTm ctm)
            ( Inh_CTm
              { inlineMap_Inh_CTm = inlineMapEmpty
              , inlineId_Inh_CTm = 0
              , nextInlineId_Inh_CTm = 1
              }
            )
    in inlined_Syn_CTm t
%%]

%%[(8 core) hs
data InlineMap =
  InlineMap
    { valueMap :: Map.Map ValueName (ValueName, Maybe (Bool, InlineMap, ValueInlineInfo))
    , contMap :: Map.Map ContName (ContName, Maybe (Bool, InlineMap, ContInlineInfo))
    , thunkMap :: Map.Map ThunkName (ThunkName, Maybe (Bool, InlineMap, ThunkInlineInfo))
    }

data ValueInlineInfo
  = IntInlineInfo Int
  | StringInlineInfo String
  | FuncInlineInfo CTm ContName [ThunkName]
  | TagInlineInfo CTag [(ThunkName, Maybe (Bool, InlineMap, ThunkInlineInfo))]
type ContInlineInfo = (CTm, ValueName)
type ThunkInlineInfo = (CTm, ContName)

applyInlineMap :: Bool -> CTm -> InlineMap -> Int -> (CTm, Bool, Int)
applyInlineMap allowMulti ctm rep inlineId
  = let t = wrap_CTm (sem_CTm ctm)
            ( Inh_CTm
              { inlineMap_Inh_CTm = rep
              , inlineId_Inh_CTm = inlineId
              , nextInlineId_Inh_CTm = inlineId + 1
              }
            )
    in (inlined_Syn_CTm t, (not allowMulti) || inlinedSingle_Syn_CTm t, nextInlineId_Syn_CTm t)

setMapMaybe :: (Ord a, Ord b) => (a -> Maybe b) -> Set.Set a -> Set.Set b
setMapMaybe f s = Set.map fromJust (Set.filter isJust (Set.map f s))

varSetToThunkSet :: VarSet -> Set.Set ThunkName
varSetToThunkSet
  = setMapMaybe toThunk
  where
    toThunk (CPSThunk t) = Just t
    toThunk _ = Nothing

varSetToValueSet :: VarSet -> Set.Set ValueName
varSetToValueSet
  = setMapMaybe toValue
  where
    toValue (CPSValue v) = Just v
    toValue _ = Nothing

varSetToContSet :: VarSet -> Set.Set ContName
varSetToContSet
  = setMapMaybe toCont
  where
    toCont (CPSCont c) = Just c
    toCont _ = Nothing

mapRestrictKeys :: (Ord k) => Set.Set k -> Map.Map k a -> Map.Map k a
mapRestrictKeys s m = Map.filterWithKey (\k _ -> k `Set.member` s) m

voidSingle :: (a, Maybe (Bool, InlineMap, b)) -> (a, Maybe (Bool, InlineMap, b))
voidSingle (oldId,Just (False,_,_)) = (oldId,Nothing)
voidSingle (oldId, Just (True, env, inlineInfo)) = (oldId, Just (True, voidSingles env, inlineInfo))
voidSingle all@(a,_) = all

voidSingles :: InlineMap -> InlineMap
voidSingles (InlineMap vr cr tr) = InlineMap (Map.map voidSingle vr) (Map.map voidSingle cr) (Map.map voidSingle tr)

splitInlineMap :: InlineMap -> (VarSet, VarSet) -> (InlineMap, InlineMap)
splitInlineMap orig (fvleft, fvright) =
  let
    fvBoth = Set.intersection fvleft fvright
    fvLeftOnly = Set.difference fvleft fvright
    fvRightOnly = Set.difference fvright fvleft
    repFilter fv (InlineMap vr cr tr) = InlineMap (mapRestrictKeys (varSetToValueSet fv) vr) (mapRestrictKeys (varSetToContSet fv) cr) (mapRestrictKeys (varSetToThunkSet fv) tr)
    mapLeftOnly = repFilter fvLeftOnly orig
    mapRightOnly = repFilter fvRightOnly orig
    mapBoth = repFilter fvBoth orig
    mapBothStripped = voidSingles mapBoth
  in
    (inlineMapUnion mapLeftOnly mapBothStripped, inlineMapUnion mapRightOnly mapBothStripped)

infoValueName :: InlineMap -> ValueName -> (ValueName, Maybe (Bool, InlineMap, ValueInlineInfo))
infoValueName r v = Map.findWithDefault (v, Nothing) v (valueMap r)

infoContName :: InlineMap -> ContName -> (ContName, Maybe (Bool, InlineMap, ContInlineInfo))
infoContName r c = Map.findWithDefault (c, Nothing) c (contMap r) 

infoThunkName :: InlineMap -> ThunkName -> (ThunkName, Maybe (Bool, InlineMap, ThunkInlineInfo))
infoThunkName r t = Map.findWithDefault (t, Nothing) t (thunkMap r)

replaceValueName :: InlineMap -> ValueName -> ValueName
replaceValueName m v = fst (infoValueName m v)

replaceContName :: InlineMap -> ContName -> ContName
replaceContName m c = fst (infoContName m c)

replaceThunkName :: InlineMap -> ThunkName -> ThunkName
replaceThunkName m t = fst (infoThunkName m t)

deleteValue :: ValueName -> InlineMap -> InlineMap
deleteValue v r = r { valueMap = Map.delete v (valueMap r) }

deleteCont :: ContName -> InlineMap -> InlineMap
deleteCont c r = r { contMap = Map.delete c (contMap r) }

deleteThunk :: ThunkName -> InlineMap -> InlineMap
deleteThunk t r = r { thunkMap = Map.delete t (thunkMap r) }

insertValue :: ValueName -> (ValueName, Maybe (Bool, InlineMap, ValueInlineInfo)) -> InlineMap -> InlineMap
insertValue k v r = r { valueMap = Map.insert k v (valueMap r) }

insertCont :: ContName -> (ContName, Maybe (Bool, InlineMap, ContInlineInfo)) -> InlineMap -> InlineMap
insertCont k v r = r { contMap = Map.insert k v (contMap r) }

insertThunk :: ThunkName -> (ThunkName, Maybe (Bool, InlineMap, ThunkInlineInfo)) -> InlineMap -> InlineMap
insertThunk k v r = r { thunkMap = Map.insert k v (thunkMap r) }

insertThunks :: [(ThunkName, (ThunkName, Maybe (Bool, InlineMap, ThunkInlineInfo)))] -> InlineMap -> InlineMap
insertThunks t r = r { thunkMap = ((Map.fromList t) `Map.union` (thunkMap r)) }

inlineMapUnion :: InlineMap -> InlineMap -> InlineMap
inlineMapUnion (InlineMap a1 a2 a3) (InlineMap b1 b2 b3) = InlineMap (Map.union a1 b1) (Map.union a2 b2) (Map.union a3 b3)

inlineMapEmpty :: InlineMap
inlineMapEmpty = InlineMap Map.empty Map.empty Map.empty

inlineMapSingleValue :: ValueName -> (ValueName, Maybe (Bool, InlineMap, ValueInlineInfo)) -> InlineMap
inlineMapSingleValue v vi = InlineMap (Map.singleton v vi) Map.empty Map.empty
inlineMapSingleCont :: ContName -> (ContName, Maybe (Bool, InlineMap, ContInlineInfo)) -> InlineMap
inlineMapSingleCont c ci = InlineMap Map.empty (Map.singleton c ci) Map.empty
inlineMapSingleThunk :: ThunkName -> (ThunkName, Maybe (Bool, InlineMap, ThunkInlineInfo)) -> InlineMap
inlineMapSingleThunk t ti = InlineMap Map.empty Map.empty (Map.singleton t ti)
%%]

%%[(8 core) hs
trfValueName :: ValueName -> Int -> ValueName
trfValueName (ValueName hsn) n = ValueName (hsnUniqifyInt HsNameUniqifier_Inline n hsn)

trfContName :: ContName -> Int -> ContName
trfContName (ContName hsn) n = ContName (hsnUniqifyInt HsNameUniqifier_Inline n hsn)

trfThunkName :: ThunkName -> Int -> ThunkName
trfThunkName (ThunkName hsn) n = ThunkName (hsnUniqifyInt HsNameUniqifier_Inline n hsn)
%%]

%%[(8 core)
{-
-- When to inline?
-}

ATTR CTm [ | | isSingleStatement : {Bool} ]
SEM CTm
  | ContAppl loc.isSingleStatement = True
  | ThunkEval loc.isSingleStatement = True
  | FuncAppl loc.isSingleStatement = True
  | Exit loc.isSingleStatement = True
  | * - ContAppl ThunkEval FuncAppl Exit loc.isSingleStatement = False

ATTR CBind CBindL [ | | isOnlyValues USE {&&} {True} : {Bool} ]
SEM CBind
  | ValBind lhs.isOnlyValues = True
  | * - ValBind lhs.isOnlyValues = False

ATTR CTm [ | | isSinglePlusVal : {Bool} ]
SEM CTm
  | Let lhs.isSinglePlusVal = @body.isSingleStatement && @binds.isOnlyValues
  | * - Let lhs.isSinglePlusVal = @loc.isSingleStatement

SEM CTm
  | LetCont loc.shouldInline = True -- @bindbody.isSingleStatement
  | LetCont loc.allowMultiInline = False -- @bindbody.isSingleStatement


SEM CVal
  | IntVal StringVal loc.shouldInline = True
  | IntVal StringVal loc.allowMultiInline = True
  | LamVal loc.allowMultiInline = not @body.inlinedSingle
  | LamVal loc.shouldInline = @body.isSinglePlusVal
  | TagVal loc.shouldInline = True
  | TagVal loc.allowMultiInline = False

ATTR CBind CVal [ | | shouldInline : {Bool} allowMultiInline : {Bool} ]
SEM CBind
  | ThunkBind loc.shouldInline = @body.isSingleStatement
  | ThunkBind loc.allowMultiInline = not @body.inlinedSingle
  | ValBind loc.shouldInline = @value.shouldInline
  | ValBind loc.allowMultiInline = @value.allowMultiInline

ATTR CTm [ | | isDirectThunkEval : {Maybe (ThunkName, ContName)} ]
SEM CTm
	| ThunkEval lhs.isDirectThunkEval = Just (@thunk, @cont)
	| * - ThunkEval lhs.isDirectThunkEval = Nothing

ATTR CTm [ | | isDirectContAppl : {Maybe (ContName, ValueName)} ]
SEM CTm
	| ContAppl lhs.isDirectContAppl = Just (@cont, @val)
	| * - ContAppl lhs.isDirectContAppl = Nothing
%%]

%%[(8 core)
ATTR CTm CVal CBind CBindL CCasePattern CCaseBranch CCaseBranchL [ inlineMap : {InlineMap} | | ]
ATTR CTm CVal CBind CBindL CCasePattern CCaseBranch CCaseBranchL [ inlineId : {Int} | nextInlineId : {Int} | ]
ATTR CTm CVal CBind CBindL CCasePattern CCaseBranch CCaseBranchL [ | | inlined : SELF original: SELF ]
-- Did we inline something that's marked as "can only be inlined once" ?
ATTR CTm CVal CBind CBindL CCasePattern CCaseBranch CCaseBranchL [ | | inlinedSingle USE {||} {False} : {Bool} ]
%%]

%%[(8 core)
{-
-- Using of inline information
-}
SEM CTm
  | ContAppl (loc.newContName, loc.contInline) = infoContName @lhs.inlineMap @cont
  | ContAppl loc.valInfo = infoValueName @lhs.inlineMap @val
  | ContAppl (lhs.inlined, lhs.inlinedSingle, lhs.nextInlineId) =
      case @loc.contInline of
        Nothing ->
          ( CTm_ContAppl
            @loc.newContName
            (fst @loc.valInfo)
          , False
          , @lhs.nextInlineId
          )
        Just (allowMulti, env, (body, valname)) ->
          applyInlineMap
            allowMulti
            body
            (insertValue valname @loc.valInfo env)
            @lhs.nextInlineId

SEM CTm
  | ThunkEval (loc.newThunkName, loc.thunkInline) = infoThunkName @lhs.inlineMap @thunk
  | ThunkEval loc.contInfo = infoContName @lhs.inlineMap @cont
  | ThunkEval (lhs.inlined, lhs.inlinedSingle, lhs.nextInlineId) =
      case @loc.thunkInline of
        Nothing ->
          ( CTm_ThunkEval
            @loc.newThunkName
            (fst @loc.contInfo)
          , False
          , @lhs.nextInlineId
          )
        Just (allowMulti, env, (body, contname)) ->
          applyInlineMap
            allowMulti
            body
            (insertCont contname @loc.contInfo env)
            @lhs.nextInlineId

SEM CTm
  | FuncAppl (loc.newFuncName, loc.funcInline) = infoValueName @lhs.inlineMap @func
  | FuncAppl loc.contInfo = infoContName @lhs.inlineMap @cont
  | FuncAppl loc.argsInfo = map (infoThunkName @lhs.inlineMap) @args
  | FuncAppl (lhs.inlined, lhs.inlinedSingle, lhs.nextInlineId) =
      case @loc.funcInline of
        Just (allowMulti, env, FuncInlineInfo body contname argnames) ->
          applyInlineMap
            allowMulti
            body
            ( foldr
              (\(k, v) m -> insertThunk k v m)
              (insertCont contname @loc.contInfo env)
              (zip argnames @loc.argsInfo)
            )
            @lhs.nextInlineId
        _ ->
          ( CTm_FuncAppl
            @loc.newFuncName
            (fst @loc.contInfo)
            (map fst @loc.argsInfo)
          , False
          , @lhs.nextInlineId
          ) 

SEM CTm
  | Exit loc.newValName = replaceValueName @lhs.inlineMap @val
  | Exit lhs.inlined = CTm_Exit @loc.newValName

SEM CTm
  | Case loc.newValName = replaceValueName @lhs.inlineMap @val
  | Case branches.inlineMap = insertValue @val (@loc.newValName, Nothing) @lhs.inlineMap
  | Case lhs.inlined = CTm_Case @loc.newValName @branches.inlined
%%]

%%[(8 core)
{- Propagation of inline info -}

ATTR CVal [ | | inlineInfo : {Maybe (Bool, ValueInlineInfo)} ]

SEM CVal
  | IntVal lhs.inlineInfo = Just (@loc.allowMultiInline, IntInlineInfo @value)
  | StringVal lhs.inlineInfo = Just (@loc.allowMultiInline, StringInlineInfo @value)

SEM CVal
  | LamVal loc.newBindCont = trfContName @bindcont @lhs.inlineId
  | LamVal loc.newBindArgs = map (\x -> trfThunkName x @lhs.inlineId) @bindargs
  | LamVal body.inlineMap =
      insertCont
        @bindcont
        (@loc.newBindCont, Nothing)
        ( insertThunks
            (zip @bindargs (map (\x -> (x,Nothing)) @loc.newBindArgs))
            @lhs.inlineMap
        )
  | LamVal lhs.inlineInfo =
      case @loc.shouldInline of
        False -> Nothing
        True -> Just (@loc.allowMultiInline, FuncInlineInfo @body.original @bindcont @bindargs)
  | LamVal lhs.inlined = CVal_LamVal @loc.newBindCont @loc.newBindArgs @body.inlined

SEM CVal
  | TagVal lhs.inlineInfo = Just (@loc.allowMultiInline, TagInlineInfo @tag (map (infoThunkName @lhs.inlineMap) @args))
  | TagVal lhs.inlined = CVal_TagVal @tag (map (replaceThunkName @lhs.inlineMap) @args)

SEM CTm
  | LetCont loc.newContName = trfContName @contname @lhs.inlineId
  | LetCont loc.newValName = trfValueName @valname @lhs.inlineId
  | LetCont (loc.newBindInlineMap, loc.newBodyInlineMap) = splitInlineMap @lhs.inlineMap (varSetDeleteValue @valname @bindbody.freeVars, varSetDeleteCont @contname @body.freeVars)
  | LetCont bindbody.inlineMap = insertValue @valname (@loc.newValName,Nothing) @loc.newBindInlineMap
  | LetCont loc.inlineInfo =
      case @loc.shouldInline of
        False -> Nothing
        True -> Just (@loc.allowMultiInline, @loc.newBindInlineMap,(@bindbody.original, @valname))
  | LetCont body.inlineMap =
      case @bindbody.isDirectContAppl of
        Nothing -> insertCont @contname (@loc.newContName, @loc.inlineInfo) @lhs.inlineMap
        Just (cont, val) ->
          if (val == @valname)
            then insertCont @contname (infoContName @lhs.inlineMap cont) @lhs.inlineMap
            else insertCont @contname (@loc.newContName, @loc.inlineInfo) @lhs.inlineMap
  | LetCont lhs.inlined =
      CTm_LetCont @loc.newContName @loc.newValName @bindbody.inlined @body.inlined

SEM CTm
  | LetFFI loc.newValName = trfValueName @valname @lhs.inlineId
  | LetFFI loc.newArgs = map (replaceValueName @lhs.inlineMap) @args
  | LetFFI body.inlineMap = insertValue @valname (@loc.newValName, Nothing) @lhs.inlineMap
  | LetFFI lhs.inlined = CTm_LetFFI @loc.newValName @instr @loc.newArgs @ty @body.inlined

SEM CTm
  | Let loc.newInlineMap = @binds.newInlineMap `inlineMapUnion` @lhs.inlineMap
  | Let (binds.inlineMap, body.inlineMap) = splitInlineMap @loc.newInlineMap (@binds.nonRecFreeVars, @body.freeVars)

ATTR CBindL [ | | nonRecFreeVars : {VarSet} ]
SEM CBindL
  | Nil lhs.freeVarsPerBind = Set.empty
  | Nil lhs.nonRecFreeVars = varSetEmpty
  | Cons loc.hdNonRecFreeVars = @hd.freeVars `Set.difference` @hd.boundVars
  | Cons lhs.nonRecFreeVars = @loc.hdNonRecFreeVars `Set.union` @tl.nonRecFreeVars

SEM CBindL
  | Cons (hd.inlineMap, tl.inlineMap) = splitInlineMap @lhs.inlineMap (@loc.hdNonRecFreeVars, @tl.nonRecFreeVars)

ATTR CBind CBindL [ | | newInlineMap USE {inlineMapUnion} {inlineMapEmpty} : {InlineMap} ]
SEM CBind
  | ThunkBind loc.newThunkName = trfThunkName @thunkname @lhs.inlineId
  | ThunkBind loc.newContName = trfContName @contname @lhs.inlineId
  | ThunkBind loc.redirectedThunkName =
      case @body.isDirectThunkEval of
        Nothing -> @loc.newThunkName
        Just (thunk, cont) ->
          if (cont == @contname) && (thunk /= @thunkname)
            then replaceThunkName @lhs.inlineMap thunk
            else @loc.newThunkName
  | ThunkBind lhs.newInlineMap =
      case @loc.shouldInline of
        False -> inlineMapSingleThunk @thunkname (@loc.redirectedThunkName, Nothing)
        True -> inlineMapSingleThunk @thunkname (@loc.redirectedThunkName, Just (@loc.allowMultiInline, @lhs.inlineMap, (@body.original, @contname)))
  | ThunkBind body.inlineMap = insertCont @contname (@loc.newContName, Nothing) @lhs.inlineMap
  | ThunkBind lhs.inlined = CBind_ThunkBind @loc.newThunkName @loc.newContName @body.inlined

SEM CBind
  | ValBind loc.newValName = trfValueName @valname @lhs.inlineId
  | ValBind lhs.newInlineMap =
      inlineMapSingleValue @valname (@loc.newValName, fmap (\(allowMulti, info) -> (allowMulti, @lhs.inlineMap, info)) @value.inlineInfo)
  | ValBind lhs.inlined = CBind_ValBind @loc.newValName @value.inlined
%%]

