%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 core) hs module {%{EH}CoreCPS.Trf.DropUnused} import ({%{EH}CoreCPS}, qualified Data.Set as Set, Data.Maybe, {%{EH}Ty})
%%]
%%[(8 core).WRAPPER ag import({CoreCPS/AbsSyn}, {CoreCPS/CommonFV})
WRAPPER CTm
%%]

%%[(8 core) hs export(ctmTrfDropUnused)
ctmTrfDropUnused :: CTm -> CTm
ctmTrfDropUnused ctm
  = let t = wrap_CTm (sem_CTm ctm)
            ( Inh_CTm
              { }
            )
    in dropunused_Syn_CTm t
%%]

%%[(8 core)
ATTR CTm CVal CBind CBindL CCasePattern CCaseBranch CCaseBranchL [ | | dropunused : SELF ]
SEM CTm
  | LetCont loc.dropped = varSetContMember @contname @body.freeVars
  | LetCont lhs.dropunused =
      if @loc.dropped
        then CTm_LetCont @contname @valname @bindbody.dropunused @body.dropunused
        else @body.dropunused
  | LetCont lhs.freeVars =
      if @loc.dropped
        then @loc.freeVars
        else @body.freeVars
  | Let loc.dropped = varSetNull (@body.freeVars `varSetIntersection` @binds.boundVars)
  | Let lhs.dropunused = 
      if @loc.dropped
        then @body.dropunused
        else CTm_Let @binds.dropunused @body.dropunused
  | Let lhs.freeVars =
      if @loc.dropped
        then @body.freeVars
        else @loc.freeVars
%%]
