%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 core) hs module {%{EH}CoreCPS.Trf.Unrec} import({%{EH}CoreCPS}, {%{EH}Ty}, UHC.Util.Utils(scc), qualified Data.Set as Set, qualified Data.Map as Map, Data.Maybe)
%%]

%%[(8 core).WRAPPER ag import({CoreCPS/AbsSyn},{CoreCPS/CommonFV})
WRAPPER CTm
%%]

%%[(8 core) hs export(ctmTrfUnrec)
ctmTrfUnrec :: CTm -> CTm
ctmTrfUnrec ctm
  = let t = wrap_CTm (sem_CTm ctm)
            ( Inh_CTm 
              {
              }
            )
    in cTrf_Syn_CTm t
%%]

%%[(8 core)
ATTR CBind CBindL [ | | refMap USE {Map.unionWith Set.union} {Map.empty} : {Map.Map CPSVar VarSet} ]
SEM CBind
  | ThunkBind lhs.refMap = Map.singleton (CPSThunk @thunkname) @loc.freeVars
  | ValBind lhs.refMap = Map.singleton (CPSValue @valname) @value.freeVars

ATTR CBind CBindL [ | | bindMap USE {Map.union} {Map.empty} : {Map.Map CPSVar CBind} ]
SEM CBind
  | ThunkBind lhs.bindMap = Map.singleton (CPSThunk @thunkname) (CBind_ThunkBind @thunkname @contname @body.cTrf)
  | ValBind lhs.bindMap = Map.singleton (CPSValue @valname) (CBind_ValBind @valname @value.cTrf)
%%]


%%[(8 core)
ATTR CTm CVal CBind CBindL CCaseBranch CCaseBranchL CCasePattern [ | | cTrf : SELF ]

SEM CTm
  | Let loc.truncatedRefMap = Map.map (Set.intersection @binds.boundVars) @binds.refMap
  | Let loc.flattenedRefMap = Map.toList (Map.map Set.toList @loc.truncatedRefMap)
  | Let loc.scc = scc @loc.flattenedRefMap
  | Let lhs.cTrf = foldr (\binds -> CTm_Let (catMaybes $ map (\bind -> Map.lookup bind @binds.bindMap) binds)) @body.cTrf @loc.scc


%%]
