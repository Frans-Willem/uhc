%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CoreCPS Pretty Printer
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 core) hs module {%{EH}CoreCPS.Pretty} import(UHC.Util.Pretty,{%{EH}CoreCPS})
%%]
%%[(8 core) hs import({%{EH}Ty}, {%{EH}Ty.Pretty})
%%]

%%[(8 core).WRAPPER ag import({CoreCPS/AbsSyn})
WRAPPER
  CTm
%%]

%%[(8 core) hs export(ppCTm)
ppCTm :: CTm -> PP_Doc
ppCTm tm
  = pp_Syn_CTm t
  where t = wrap_CTm (sem_CTm tm)
              (Inh_CTm {})
%%]

%%[(8 core) hs
instance PP ContName where
  pp (ContName nm) = pp nm

instance PP ThunkName where
  pp (ThunkName nm) = pp nm

instance PP ValueName where
  pp (ValueName nm) = pp nm
%%]

%%[(8 core) ag
ATTR CTm [ | | pp : {PP_Doc} ]
SEM CTm
  | LetCont lhs.pp
      = (text "let cont" >#< @contname >#< @valname >#< text "=" >#< @bindbody.pp)
        >-< (text "in" >#< @body.pp)
  | Let lhs.pp
      = (text "let" >#< @binds.pp) >-< (text "in" >#< @body.pp)
  | LetFFI lhs.pp
      = ((text "let ffi") >#< @valname >#< (text "=") >#< (foldr1 (>#<) (ppParens ((text $ show @instr) >#< (text "::") >#< (pp @ty)) : map pp @args))) >-< ((text "in") >#< @body.pp)
  | ContAppl lhs.pp = @cont >#< @val >#< text "(cont-appl)"
  | ThunkEval lhs.pp = @thunk >#< @cont >#< text "(thunk-eval)"
  | FuncAppl lhs.pp = @func >#< @cont >#< (ppSpaces @args) >#< text "(func-appl)"
  | Exit lhs.pp = @val >#< text "(exit)"
  | Case lhs.pp =
      (text "case" >#< @val >#< text "of") >-<
      indent 2 @branches.pp

ATTR CBindL [ | | pp USE {>-<} {empty} : {PP_Doc} ]
ATTR CBind [ | | pp : {PP_Doc} ]
SEM CBind
  | ThunkBind lhs.pp = (text "thunk") >#< @thunkname >#< @contname >#< (text "=") >#< @body.pp 
  | ValBind lhs.pp = (text "val") >#< @valname >#< (text "=") >#< @value.pp

ATTR CVal [ | | pp : {PP_Doc} ]
SEM CVal
  | IntVal lhs.pp = text "#Int" >#< @value
  | StringVal lhs.pp = text "#String" >#< @value
  | LamVal lhs.pp
      = text "(\\" >|< @bindcont >#< (ppSpaces @bindargs) >#< text "->" >#< @body.pp >|< text ")"
  | TagVal lhs.pp
      = text "#Tag" >#< ppSpaces ((pp @tag) : map pp @args)

ATTR CCaseBranchL [ | | pp USE {>-<} {empty} : {PP_Doc} ]
ATTR CCasePattern [ | | pp : {PP_Doc} ]
SEM CCasePattern
  | Default lhs.pp = text "default"
  | Tag lhs.pp =
      case @rest of
        Nothing -> @loc.tagpp
        Just x -> (pp x) >#< text "@" >#< @loc.tagpp
  | Tag loc.tagpp =
      text "#Tag" >#< (ppSpaces ((pp @tag) : map pp @args))
  | Int lhs.pp = text $ show @value
ATTR CCaseBranch [ | | pp : {PP_Doc} ]
SEM CCaseBranch
  | CaseBranch lhs.pp =
      (@pat.pp >#< text "=>") >-<
      (indent 2 @body.pp)
%%]
