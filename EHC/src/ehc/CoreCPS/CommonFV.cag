%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 core) hs
%%]

%%[(8 core)
ATTR CVal CBind CBindL CCaseBranch CCaseBranchL CTm [ | | freeVars USE {varSetUnion} {varSetEmpty} : {VarSet} ]

SEM CVal
  | LamVal loc.freeVars = (varSetDeleteCont @bindcont @body.freeVars) `varSetDifference` (varSetFromThunkList @bindargs)
  | TagVal loc.freeVars = varSetFromThunkList @args

SEM CBind
  | ThunkBind loc.freeVars = varSetDeleteCont @contname @body.freeVars

SEM CCaseBranch
  | CaseBranch loc.freeVars = @body.freeVars `varSetDifference` @pat.boundVars

SEM CTm
  | LetCont loc.freeVars = (varSetDeleteValue @valname @bindbody.freeVars) `varSetUnion` (varSetDeleteCont @contname @body.freeVars)
  | LetFFI loc.freeVars = (varSetFromValueList @args) `varSetUnion` (varSetDeleteValue @valname @body.freeVars)
  | Let loc.freeVars = (@binds.freeVars `varSetUnion` @body.freeVars) `varSetDifference` @binds.boundVars
  | ContAppl loc.freeVars = (varSetSingleCont @cont) `varSetUnion` (varSetSingleValue @val)
  | ThunkEval loc.freeVars = (varSetSingleThunk @thunk) `varSetUnion` (varSetSingleCont @cont)
  | FuncAppl loc.freeVars = (varSetSingleValue @func) `varSetUnion` (varSetSingleCont @cont) `varSetUnion` (varSetFromThunkList @args)
  | Exit loc.freeVars = varSetSingleValue @val
  | Case loc.freeVars = (varSetSingleValue @val) `varSetUnion` @branches.freeVars

ATTR CBind CBindL CCasePattern [ | | boundVars USE {varSetUnion} {varSetEmpty} : {VarSet} ]

SEM CBind
  | ThunkBind loc.boundVars = varSetSingleThunk @thunkname
  | ValBind loc.boundVars = varSetSingleValue @valname

SEM CCasePattern
  | Tag loc.boundVars = varSetFromThunkList @args
%%]
