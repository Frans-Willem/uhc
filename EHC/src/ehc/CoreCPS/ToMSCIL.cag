%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%
%%% Conversion to MSCIL
%%%

%%[(8 core) hs module {%{EH}CoreCPS.ToMSCIL} import({%{EH}Base.Common} hiding (nextUnique),{%{EH}CoreCPS})
%%]

%%[(8 core) hs import(qualified {%{EH}MSCIL} as MSCIL, Data.Maybe, {%{EH}Base.HsName})
%%]
%%[(8 core) hs import(qualified Data.Map.Strict as Map, qualified Data.Set as Set)
%%]

%%[(8 core).WRAPPER ag import({CoreCPS/AbsSyn})
WRAPPER CTm
%%]

%%[(8 core) hs export(cps2cil)
cps2cil :: CTm -> MSCIL.Assembly
cps2cil tm
  = MSCIL.Assembly_Assembly
      [MSCIL.ExternAssembly_Assembly "mscorlib" [4,0,0,0] [0xB7, 0x7A, 0x5C, 0x56, 0x19, 0x34, 0xE0, 0x89]]
      "tempname"
      0x8004
      [0,0,0,0]
      (defaultClasses ++ (classes_Syn_CTm t) ++ (createTagClasses $ tags_Syn_CTm t))
      [ MSCIL.Method_Method
          ["static"]
          MSCIL.Type_Void
          (MSCIL.Identifier_Simple "main")
          []
          ( MSCIL.Instruction_PseudoEntryPoint
          : MSCIL.Instruction_PseudoMaxStack (maxstack_Syn_CTm t)
          : MSCIL.Instruction_PseudoLocals (locals_Syn_CTm t)
          : (instr_Syn_CTm t)
          )
      ]
  where
    t = wrap_CTm (sem_CTm tm) (inh)
    inh = Inh_CTm {env_Inh_CTm = Map.empty, localoffset_Inh_CTm = 0, caseNumber_Inh_CTm = 0}

%%]

%%[(8 core) hs
data DataLocation
  = Local Int
  | Argument Int
  | Field DataLocation MSCIL.Variable

data EnvironmentKey
  = ValueKey ValueName
  | ThunkKey ThunkName
  | ContinuationKey ContName

instance Eq EnvironmentKey where
  (==) (ValueKey (ValueName a)) (ValueKey (ValueName b)) = a == b
  (==) (ThunkKey (ThunkName a)) (ThunkKey (ThunkName b)) = a == b
  (==) (ContinuationKey (ContName a)) (ContinuationKey (ContName b)) = a == b
  (==) _ _ = False

instance Ord EnvironmentKey where
  compare (ValueKey (ValueName a)) (ValueKey (ValueName b)) = compare a b
  compare (ThunkKey (ThunkName a)) (ThunkKey (ThunkName b)) = compare a b
  compare (ContinuationKey (ContName a)) (ContinuationKey (ContName b)) = compare a b
  compare (ValueKey _) _ = LT
  compare (ThunkKey _) _ = GT
  compare _ (ValueKey _) = GT
  compare _ (ThunkKey _) = LT


class ToEnvKey a where
  asKey :: a -> EnvironmentKey

instance ToEnvKey ValueName where
  asKey = ValueKey
instance ToEnvKey ThunkName where
  asKey = ThunkKey
instance ToEnvKey ContName where
  asKey = ContinuationKey

instance Show EnvironmentKey where
  show (ValueKey (ValueName nm)) = "value " ++ show nm
  show (ThunkKey (ThunkName nm)) = "thunk " ++ show nm
  show (ContinuationKey (ContName nm)) = "continuation " ++ show nm

type Environment = Map.Map EnvironmentKey DataLocation

-- Gets current stacksize, puts variable on top of stack, and returns instructions and maximum stack size used.
readVar :: DataLocation -> (MSCIL.InstructionL, Int)
readVar (Local index) = ([MSCIL.Instruction_LdLoc index], 1)
readVar (Argument index) = ([MSCIL.Instruction_LdArg index], 1)
readVar (Field owner var)
  = (ownerinstr ++ [MSCIL.Instruction_LdFld var], max 1 ownermaxstack)
  where
    (ownerinstr, ownermaxstack) = readVar owner

readEnv :: Environment -> EnvironmentKey -> (MSCIL.InstructionL, Int)
readEnv env key
  = case (Map.lookup key env) of
      Just x -> readVar x
      Nothing -> readUndefinedVar key

readUndefinedVar :: EnvironmentKey -> (MSCIL.InstructionL, Int)
readUndefinedVar (ValueKey name) = ((debugOutputInstrs ("ERROR: Undefined value " ++ (show name))) ++ [MSCIL.Instruction_Ret], 1)
-- TODO: Instantiate thunk or continuation which will error when invoked.
readUndefinedVar key = ([MSCIL.Instruction_LdNull, MSCIL.Instruction_Comment ("Undefined " ++ (show key))], 1)

keyToType :: EnvironmentKey -> MSCIL.Type
keyToType (ValueKey _) = MSCIL.Type_Object
keyToType (ThunkKey _) = MSCIL.Type_Class thunkBase
keyToType (ContinuationKey _) = MSCIL.Type_Class continuationBase

keyToIdentifier :: EnvironmentKey -> MSCIL.Identifier
keyToIdentifier (ValueKey (ValueName nm)) = MSCIL.Identifier_Simple $ show nm
keyToIdentifier (ThunkKey (ThunkName nm)) = MSCIL.Identifier_Simple $ show nm
keyToIdentifier (ContinuationKey (ContName nm)) = MSCIL.Identifier_Simple $ show nm

keyToMemberId :: MSCIL.Identifier -> EnvironmentKey -> MSCIL.Identifier
keyToMemberId p e = MSCIL.Identifier_DoubleDot p (keyToIdentifier e)

keyToVariable :: EnvironmentKey -> MSCIL.Variable
keyToVariable e = MSCIL.Variable_Variable (keyToType e) $ Just (keyToIdentifier e)

keyToMemberVar :: MSCIL.Identifier -> EnvironmentKey -> MSCIL.Variable
keyToMemberVar p e = MSCIL.Variable_Variable (keyToType e) $ Just (keyToMemberId p e)

keyToField :: EnvironmentKey -> MSCIL.Field
keyToField v = MSCIL.Field_Field ["private"] (keyToVariable v)

continuationBase :: MSCIL.Identifier
continuationBase = MSCIL.Identifier_Simple "BaseContinuation"

continuationClassName :: ContName -> MSCIL.Identifier
continuationClassName (ContName name) = MSCIL.Identifier_Simple $ "Continuation" ++ (show name)

thunkBase :: MSCIL.Identifier
thunkBase = MSCIL.Identifier_Simple "BaseThunk"

thunkWrapper :: MSCIL.Identifier
thunkWrapper = MSCIL.Identifier_Simple "WrapperThunk"

thunkClassName :: ThunkName -> MSCIL.Identifier
thunkClassName (ThunkName name) = MSCIL.Identifier_Simple $ "Thunk" ++ (show name)

functionBase :: MSCIL.Identifier
functionBase = MSCIL.Identifier_Simple "BaseFunction"

functionClassName :: ValueName -> MSCIL.Identifier
functionClassName (ValueName name) = MSCIL.Identifier_Simple $ "Function" ++ (show name)

defaultClasses :: MSCIL.ClassL
defaultClasses =
  [ MSCIL.Class_Class
      ["public","auto","ansi"]
      continuationBase
      Nothing
      []
      [ MSCIL.Method_Method
          ["public","specialname","rtspecialname","instance"]
          MSCIL.Type_Void
          (MSCIL.Identifier_Simple ".ctor")
          []
          [MSCIL.Instruction_Ret]
      , MSCIL.Method_Method
          ["public","virtual","newslot","instance"]
          MSCIL.Type_Void
          (MSCIL.Identifier_Simple "Invoke")
          [MSCIL.Variable_Variable MSCIL.Type_Object $ Just (MSCIL.Identifier_Simple "v")]
          [MSCIL.Instruction_Ret]
      ]
  , MSCIL.Class_Class
      ["public","auto","ansi"]
      thunkBase
      Nothing
      []
      [ MSCIL.Method_Method
          ["public","specialname","rtspecialname","instance"]
          MSCIL.Type_Void
          (MSCIL.Identifier_Simple ".ctor")
          []
          [MSCIL.Instruction_Ret]
      , MSCIL.Method_Method
          ["public","virtual","newslot","instance"]
          MSCIL.Type_Void
          (MSCIL.Identifier_Simple "Eval")
          [MSCIL.Variable_Variable (MSCIL.Type_Class continuationBase) $ Just (MSCIL.Identifier_Simple "k")]
          [MSCIL.Instruction_Ret]
      ]
  , MSCIL.Class_Class
      ["public","auto","ansi"]
      functionBase
      Nothing
      []
      [ MSCIL.Method_Method
          ["public","specialname","rtspecialname","instance"]
          MSCIL.Type_Void
          (MSCIL.Identifier_Simple ".ctor")
          []
          [MSCIL.Instruction_Ret]
      , MSCIL.Method_Method
          ["public","virtual","newslot","instance"]
          MSCIL.Type_Void
          (MSCIL.Identifier_Simple "Invoke")
          [ MSCIL.Variable_Variable (MSCIL.Type_Class continuationBase) $ Just (MSCIL.Identifier_Simple "k")
          , MSCIL.Variable_Variable (MSCIL.Type_Class thunkBase) $ Just (MSCIL.Identifier_Simple "t")
          ]
          [MSCIL.Instruction_Ret]
      ]
  ]

tagClassName :: CTag -> Int -> MSCIL.Identifier
tagClassName CTagRec arguments = MSCIL.Identifier_Simple $ "Record" ++ (show arguments)
tagClassName (CTag {ctagTyNm = tyNm, ctagNm = nm }) _ = MSCIL.Identifier_Simple $ (show tyNm) ++ "_" ++ (show nm)

tagFieldName :: Int -> MSCIL.Identifier
tagFieldName n = MSCIL.Identifier_Simple $ "field" ++ (show n)

tagMemberFieldName :: CTag -> Int -> Int -> MSCIL.Identifier
tagMemberFieldName t numargs n = MSCIL.Identifier_DoubleDot (tagClassName t numargs) (tagFieldName n)

tagMemberVar :: CTag -> Int -> Int -> MSCIL.Variable
tagMemberVar t numargs n = MSCIL.Variable_Variable (MSCIL.Type_Class thunkBase) (Just (tagMemberFieldName t numargs n))

createTagClass :: CTag -> Int -> MSCIL.Class
createTagClass tag arguments =
  MSCIL.Class_Class
    ["public","auto","ansi"]
    classname
    Nothing
    argfields
    [ MSCIL.Method_Method
        ["public","specialname","rtspecialname","instance"]
        MSCIL.Type_Void
        (MSCIL.Identifier_Simple ".ctor")
        argvars
        (
          [ MSCIL.Instruction_PseudoMaxStack 2
          ] ++
          storeinstrs ++ 
          [ MSCIL.Instruction_Ret
          ]
        )
    ]
  where
    classname = tagClassName tag arguments
    argnames = map tagFieldName [1..arguments]
    argvars = map (\a -> MSCIL.Variable_Variable (MSCIL.Type_Class thunkBase) $ Just a) argnames
    argfields = map (MSCIL.Field_Field ["public"]) argvars
    storeinstrs = concat $ map storeinstr (zip argnames [1..])
    storeinstr (fieldname, index) =
      [ MSCIL.Instruction_LdArg 0
      , MSCIL.Instruction_LdArg index
      , MSCIL.Instruction_StFld (tagMemberVar tag arguments index)
      ]

createTagClasses :: (Set.Set (CTag, Int)) -> [MSCIL.Class]
createTagClasses s
  = map (\(tag, args) -> createTagClass tag args) $ Set.toList s

debugOutputInstrs :: String -> MSCIL.InstructionL
debugOutputInstrs s =
  [ MSCIL.Instruction_LdStr s
  , MSCIL.Instruction_Call [] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot (MSCIL.Identifier_Dot (MSCIL.Identifier_Simple "class [corlib]System") (MSCIL.Identifier_Simple "Console")) (MSCIL.Identifier_Simple "WriteLine")) [MSCIL.Variable_Variable MSCIL.Type_Object Nothing]
  ]
%%]

%%[(8 core) ag

ATTR CTm CVal CThunkBind CThunkBindL CCaseBranch CCaseBranchL CCasePattern [ | | tags USE {Set.union} {Set.empty} : {Set.Set (CTag,Int)} ]
SEM CVal
  | TagVal lhs.tags = Set.singleton (@tag,length @args)

ATTR CTm [ env : {Environment} | | ]
ATTR CTm [ | | instr USE {++} {[]} : {MSCIL.InstructionL} ]
ATTR CTm [ | | classes USE {++} {[]} : {MSCIL.ClassL} ]
ATTR CTm [ localoffset : {Int} | | locals : {MSCIL.VariableL} ]
ATTR CTm [ | | maxstack USE {max} {0} : {Int} ]
----
-- LetVal
----
SEM CTm
  | LetVal loc.valname = asKey @bindname
  | LetVal body.env = Map.insert (asKey @bindname) (Local @lhs.localoffset) @lhs.env
  | LetVal lhs.instr =
      @bindvalue.instr ++
      [ MSCIL.Instruction_StLoc @lhs.localoffset ] ++
      @body.instr
  | LetVal lhs.localoffset = @lhs.localoffset + 1
  | LetVal lhs.locals = (keyToVariable @loc.valname) : @body.locals
  | LetVal bindvalue.name = @bindname
ATTR CVal [ name : {ValueName} | | instr : {MSCIL.InstructionL} maxstack : {Int} ]
ATTR CVal [ | | classes USE {++} {[]} : {MSCIL.ClassL} ]
ATTR CVal [ env : {Environment} | | ]
SEM CVal
  | IntVal lhs.instr =
      [ MSCIL.Instruction_LdcI4 @value
      , MSCIL.Instruction_Box (MSCIL.Identifier_Simple "[mscorlib]System.Int32")
      ]
  | StringVal lhs.instr = [MSCIL.Instruction_LdStr @value]
  | IntVal StringVal lhs.maxstack = 1
  | LamVal loc.classname = functionClassName @lhs.name
  | LamVal loc.contenv = asKey @bindcont
  | LamVal loc.thunkenv = asKey @bindarg
  | LamVal loc.upvalues = Set.toList $ (@body.freevars `Set.difference` (Set.fromList [@loc.contenv, @loc.thunkenv]))
  | LamVal lhs.classes =
      [ MSCIL.Class_Class
          ["public","auto","ansi"]
          @loc.classname
          (Just functionBase)
          (map keyToField @loc.upvalues)
          [ MSCIL.Method_Method
              ["public","specialname","rtspecialname","instance"]
              MSCIL.Type_Void
              (MSCIL.Identifier_Simple ".ctor")
              (map keyToVariable @loc.upvalues)
              (
                [  MSCIL.Instruction_LdArg 0
                , MSCIL.Instruction_Call ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot functionBase (MSCIL.Identifier_Simple ".ctor")) []
                ] ++
                ( concat $ map
                    (\(upval, index) -> 
                      [ MSCIL.Instruction_LdArg 0
                      , MSCIL.Instruction_LdArg index
                      , MSCIL.Instruction_StFld (keyToMemberVar @loc.classname upval)
                      ]
                    )
                    (zip @loc.upvalues [1..])
                ) ++ 
                [ MSCIL.Instruction_Ret ]
              )
          , MSCIL.Method_Method
              ["family","virtual","instance"]
              MSCIL.Type_Void
              (MSCIL.Identifier_Simple "Invoke")
              [ MSCIL.Variable_Variable (MSCIL.Type_Class continuationBase) $ Just (keyToIdentifier @loc.contenv)
              , MSCIL.Variable_Variable (MSCIL.Type_Class thunkBase) $ Just (keyToIdentifier @loc.thunkenv)
              ]
              ( MSCIL.Instruction_PseudoMaxStack @body.maxstack
              : MSCIL.Instruction_PseudoLocals @body.locals
              : @body.instr
              )
          ]
      ] ++ @body.classes
  | LamVal body.localoffset = 0
  | LamVal body.env =
      Map.fromList $
        (@loc.contenv, Argument 1) :
        (@loc.thunkenv, Argument 2) :
        (zip @loc.upvalues $ map ((Field (Argument 0)) . (keyToMemberVar @loc.classname)) @loc.upvalues)
  | LamVal (loc.upvalueinstr, loc.upvaluemaxstack) = unzip $ map (readEnv @lhs.env) @loc.upvalues
  | LamVal lhs.instr =
      (concat @loc.upvalueinstr) ++
      [ MSCIL.Instruction_NewObj ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot @loc.classname (MSCIL.Identifier_Simple ".ctor")) $ map keyToVariable @loc.upvalues
      ]
  | LamVal lhs.maxstack = foldr max (length @loc.upvalues) (zipWith (+) @loc.upvaluemaxstack [0..])
SEM CVal
  | TagVal loc.classname = tagClassName @tag $ length @args
  | TagVal loc.argenv = map asKey @args
  | TagVal (loc.arginstr, loc.argmaxstack) = unzip $ map (readEnv @lhs.env) @loc.argenv
  | TagVal lhs.instr =
      (concat @loc.arginstr) ++ 
      [ MSCIL.Instruction_NewObj ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot @loc.classname (MSCIL.Identifier_Simple ".ctor")) $ map keyToVariable @loc.argenv
      ]
  | TagVal lhs.maxstack = foldr max (length @args) (zipWith (+) @loc.argmaxstack [0..])
    
----
-- LetCont
----
SEM CTm
  | LetCont loc.contenv = asKey @contname
  | LetCont loc.valueenv = asKey @valname
  | LetCont lhs.locals = (keyToVariable @loc.valueenv) : @body.locals
  | LetCont loc.target = @lhs.localoffset
  | LetCont lhs.localoffset = @lhs.localoffset + 1
  | LetCont loc.classname = continuationClassName @contname
  | LetCont loc.upvalues = Set.toList $ Set.delete @loc.valueenv @bindbody.freevars
  | LetCont loc.class =
      MSCIL.Class_Class
        ["public","auto","ansi"]
        @loc.classname
        (Just continuationBase)
        (map keyToField @loc.upvalues)
        [ MSCIL.Method_Method
            ["public","specialname","rtspecialname","instance"]
            MSCIL.Type_Void
            (MSCIL.Identifier_Simple ".ctor")
            (map keyToVariable @loc.upvalues)
            (
              [  MSCIL.Instruction_LdArg 0
              , MSCIL.Instruction_Call ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot continuationBase (MSCIL.Identifier_Simple ".ctor")) []
              ] ++
              ( concat $ map
                  (\(upval, index) -> 
                    [ MSCIL.Instruction_LdArg 0
                    , MSCIL.Instruction_LdArg index
                    , MSCIL.Instruction_StFld (keyToMemberVar @loc.classname upval)
                    ]
                  )
                  (zip @loc.upvalues [1..])
              ) ++ 
              [ MSCIL.Instruction_Ret ]
            )
        , MSCIL.Method_Method
            ["family","virtual","instance"]
            MSCIL.Type_Void
            (MSCIL.Identifier_Simple "Invoke")
            [MSCIL.Variable_Variable MSCIL.Type_Object $ Just (keyToIdentifier @loc.valueenv )]
            ( MSCIL.Instruction_PseudoMaxStack @bindbody.maxstack
            : MSCIL.Instruction_PseudoLocals @bindbody.locals
            : @bindbody.instr
            )
        ]
  | LetCont bindbody.localoffset = 0
  | LetCont bindbody.env =
      Map.fromList $
        (@loc.valueenv, Argument 1) :
        (zip @loc.upvalues $ map ((Field (Argument 0)) . (keyToMemberVar @loc.classname)) @loc.upvalues)
  | LetCont lhs.classes = @loc.class : (@bindbody.classes ++ @body.classes)
  | LetCont (loc.upvalueinstr, loc.upvaluemaxstack) = unzip $ map (readEnv @lhs.env) @loc.upvalues
  | LetCont lhs.instr =
      (concat @loc.upvalueinstr) ++
      [ MSCIL.Instruction_NewObj ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot @loc.classname (MSCIL.Identifier_Simple ".ctor")) (map keyToVariable @loc.upvalues)
      , MSCIL.Instruction_StLoc @loc.target
      ] ++
      @body.instr
  | LetCont body.env = Map.insert @contenv (Local @loc.target) @lhs.env
  | LetCont lhs.maxstack = foldl max @body.maxstack (zipWith (+) (@loc.upvaluemaxstack ++ [0]) [0..])

----
-- LetThunk
----
SEM CTm
  | LetThunk lhs.locals = (map keyToVariable @binds.locals) ++ @body.locals
  | LetThunk body.env = Map.union (Map.fromList $ zip @binds.locals $ map Local [@lhs.localoffset ..]) @lhs.env
  | LetThunk body.localoffset = @lhs.localoffset + (length @binds.locals)
  | LetThunk lhs.instr = @binds.allocinstr ++ @binds.fixupinstr ++ @body.instr
  | LetThunk lhs.maxstack = foldr1 max [@binds.allocmaxstack, @binds.fixupmaxstack, @body.maxstack]
  | LetThunk binds.recenv = Map.fromList $ zip @binds.locals $ map Local [@lhs.localoffset ..]

ATTR CThunkBind [ | | local : {EnvironmentKey} ]
ATTR CThunkBindL [ | | locals : {[EnvironmentKey]} ]
SEM CThunkBindL
  | Nil lhs.locals = []
  | Cons lhs.locals = @hd.local : @tl.locals
SEM CThunkBind
  | ThunkBind loc.classname = thunkClassName @thunkname
  | ThunkBind loc.thunkenv = asKey @thunkname
  | ThunkBind loc.contenv = asKey @contname
  | ThunkBind lhs.local = @loc.thunkenv
  
ATTR CThunkBind CThunkBindL [ localoffset : {Int} | | ]
SEM CThunkBindL
  | Cons tl.localoffset = @lhs.localoffset + 1

ATTR CThunkBind CThunkBindL [ env : {Environment} | | ]
ATTR CThunkBind CThunkBindL [ recenv : {Environment} | | ]
ATTR CThunkBind CThunkBindL [ | | allocinstr USE {++} {[]} : {MSCIL.InstructionL} allocmaxstack USE {max} {0} : {Int} ]
ATTR CThunkBind CThunkBindL [ | | classes USE {++} {[]} : {MSCIL.ClassL} ]
SEM CThunkBind
  | ThunkBind loc.upvalues = @body.freevars `Set.difference` (Set.fromList [@loc.thunkenv, @loc.contenv])
  | ThunkBind loc.nonrecupvalues = Set.toList $ @loc.upvalues `Set.difference` (Map.keysSet @lhs.recenv)
  | ThunkBind loc.recupvalues = Set.toList $ @loc.upvalues `Set.intersection` (Map.keysSet @lhs.recenv)
  | ThunkBind loc.allupvalues = @loc.recupvalues ++ @loc.nonrecupvalues
  | ThunkBind lhs.classes =
      [ MSCIL.Class_Class
          ["public","auto","ansi"]
          @loc.classname
          (Just thunkBase)
          (map keyToField (@loc.nonrecupvalues ++ @loc.recupvalues))
          [ MSCIL.Method_Method
              ["public","specialname","rtspecialname","instance"]
              MSCIL.Type_Void
              (MSCIL.Identifier_Simple ".ctor")
              (map keyToVariable @loc.nonrecupvalues)
              (
                [  MSCIL.Instruction_LdArg 0
                , MSCIL.Instruction_Call ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot thunkBase (MSCIL.Identifier_Simple ".ctor")) []
                ] ++
                ( concat $ map
                    (\(upval, index) -> 
                      [ MSCIL.Instruction_LdArg 0
                      , MSCIL.Instruction_LdArg index
                      , MSCIL.Instruction_StFld (keyToMemberVar @loc.classname upval)
                      ]
                    )
                    (zip @loc.nonrecupvalues [1..])
                ) ++ 
                [ MSCIL.Instruction_Ret ]
              )
          , MSCIL.Method_Method
              ["public", "family","instance"]
              MSCIL.Type_Void
              (MSCIL.Identifier_Simple "Fixup")
              (map keyToVariable @loc.recupvalues)
              (
                (concat $ map
                  (\(upval, index) -> 
                    [ MSCIL.Instruction_LdArg 0
                    , MSCIL.Instruction_LdArg index
                    , MSCIL.Instruction_StFld (keyToMemberVar @loc.classname upval)
                    ]
                  )
                  (zip @loc.recupvalues [1..])
                ) ++
                [ MSCIL.Instruction_Ret ]
              )
          , MSCIL.Method_Method
              ["public", "family","virtual","instance"]
              MSCIL.Type_Void
              (MSCIL.Identifier_Simple "Eval")
              [MSCIL.Variable_Variable (MSCIL.Type_Class continuationBase) $ Just (keyToIdentifier @loc.contenv )]
              ( MSCIL.Instruction_PseudoMaxStack @body.maxstack
              : MSCIL.Instruction_PseudoLocals @body.locals
              : @body.instr
              )
          ]
      ] ++ @body.classes
  | ThunkBind (loc.nonrecupvalinstr, loc.nonrecupvalmaxstack) = unzip $ map (readEnv @lhs.env) @loc.nonrecupvalues
  | ThunkBind lhs.allocinstr = 
      (concat @loc.nonrecupvalinstr) ++
      [ MSCIL.Instruction_NewObj ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot @loc.classname (MSCIL.Identifier_Simple ".ctor")) (map keyToVariable @loc.nonrecupvalues)
      , MSCIL.Instruction_StLoc @lhs.localoffset
      ]
  | ThunkBind lhs.allocmaxstack = foldr max ((length @loc.nonrecupvalues) + 1) (zipWith (+) @loc.nonrecupvalmaxstack [0..])
  | ThunkBind body.localoffset = 0
  | ThunkBind body.env =
      Map.fromList $
        (@loc.thunkenv, Argument 0) :
        (@loc.contenv, Argument 1) :
        (zip @loc.allupvalues $ map ((Field (Argument 0)) . (keyToMemberVar @loc.classname)) @loc.allupvalues)

ATTR CThunkBind CThunkBindL [ | | fixupinstr USE {++} {[]} : {MSCIL.InstructionL} fixupmaxstack USE {max} {0} : {Int} ]
SEM CThunkBind
  | ThunkBind (loc.recupvalinstr, loc.recupvalmaxstack) = unzip $ map (readEnv @lhs.recenv) @loc.recupvalues
  | ThunkBind lhs.fixupinstr = 
      [ MSCIL.Instruction_LdLoc @lhs.localoffset ] ++
      (concat @loc.recupvalinstr) ++
      [ MSCIL.Instruction_Call ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot @loc.classname (MSCIL.Identifier_Simple "Fixup")) (map keyToVariable @loc.recupvalues) ]
  | ThunkBind lhs.fixupmaxstack = foldl max ((length @loc.recupvalues) + 1) (zipWith (+) @loc.recupvalmaxstack [1..])

----
-- ContAppl
----
SEM CTm
  | ContAppl lhs.locals = []
  | ContAppl loc.contenv = asKey @cont
  | ContAppl loc.valueenv = asKey @val
  | ContAppl (loc.continstr,loc.contmaxstack) = readEnv @lhs.env @loc.contenv
  | ContAppl (loc.valinstr,loc.valmaxstack) = readEnv @lhs.env @loc.valueenv
  | ContAppl lhs.instr =
      @loc.continstr ++ @loc.valinstr ++
      [ MSCIL.Instruction_Tail
      , MSCIL.Instruction_CallVirt ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot continuationBase (MSCIL.Identifier_Simple "Invoke")) [MSCIL.Variable_Variable MSCIL.Type_Object Nothing]
      , MSCIL.Instruction_Ret
      ]
  | ContAppl lhs.maxstack =
      @loc.contmaxstack `max`
      (@loc.valmaxstack + 1) `max`
      2

----
-- ThunkEval
----
SEM CTm
  | ThunkEval lhs.locals = []
  | ThunkEval loc.thunkenv = asKey @thunk
  | ThunkEval loc.contenv = asKey @cont
  | ThunkEval (loc.thunkinstr, loc.thunkmaxstack) = readEnv @lhs.env @loc.thunkenv
  | ThunkEval (loc.continstr, loc.contmaxstack) = readEnv @lhs.env @loc.contenv
  | ThunkEval lhs.instr =
      @loc.thunkinstr ++ @loc.continstr ++
      [ MSCIL.Instruction_Tail
      , MSCIL.Instruction_CallVirt ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot thunkBase (MSCIL.Identifier_Simple "Eval")) [MSCIL.Variable_Variable (MSCIL.Type_Class continuationBase) Nothing]
      , MSCIL.Instruction_Ret
      ]
  | ThunkEval lhs.maxstack =
      @loc.thunkmaxstack `max`
      (@loc.contmaxstack + 1) `max`
      2

----
-- FuncAppl
----
SEM CTm
  | FuncAppl lhs.locals = []
  | FuncAppl loc.funcenv = asKey @func
  | FuncAppl loc.contenv = asKey @cont
  | FuncAppl loc.argenv = asKey @arg
  | FuncAppl (loc.funcinstr, loc.funcmaxstack) = readEnv @lhs.env @loc.funcenv
  | FuncAppl (loc.continstr, loc.contmaxstack) = readEnv @lhs.env @loc.contenv
  | FuncAppl (loc.arginstr, loc.argmaxstack) = readEnv @lhs.env @loc.argenv
  | FuncAppl lhs.instr =
      @loc.funcinstr ++ @loc.continstr ++ @loc.arginstr ++
      [ MSCIL.Instruction_Tail
      , MSCIL.Instruction_CallVirt ["instance"] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot functionBase (MSCIL.Identifier_Simple "Invoke")) [MSCIL.Variable_Variable (MSCIL.Type_Class continuationBase) Nothing, MSCIL.Variable_Variable (MSCIL.Type_Class thunkBase) Nothing]
      , MSCIL.Instruction_Ret
      ]
  | FuncAppl lhs.maxstack =
      @loc.funcmaxstack `max`
      (@loc.contmaxstack + 1) `max`
      (@loc.argmaxstack + 2) `max`
      3

---
-- Exit
----
SEM CTm
  | Exit (loc.valinstr, loc.valmaxstack) = readEnv @lhs.env (asKey @val)
  | Exit lhs.instr =
      @loc.valinstr ++
      [ MSCIL.Instruction_Tail
      , MSCIL.Instruction_Call [] MSCIL.Type_Void (MSCIL.Identifier_DoubleDot (MSCIL.Identifier_Dot (MSCIL.Identifier_Simple "class [corlib]System") (MSCIL.Identifier_Simple "Console")) (MSCIL.Identifier_Simple "WriteLine")) [MSCIL.Variable_Variable MSCIL.Type_Object Nothing]
      , MSCIL.Instruction_Ret
      ]
  | Exit lhs.maxstack = max 1 @loc.valmaxstack
  | Exit lhs.locals = []

----
-- Case
----
ATTR CTm CVal CCaseBranch CCaseBranchL CThunkBind CThunkBindL [ | caseNumber : {Int} | ]
SEM CTm
  | Case loc.valenv = asKey @val
  | Case loc.currentNumber = @lhs.caseNumber
  | Case lhs.caseNumber = @lhs.caseNumber + 1
  | Case loc.classname = MSCIL.Identifier_Simple $ "CaseSwitch" ++ (show @loc.currentNumber)
  | Case branches.index = 0
  | Case lhs.locals = []
--      if @branches.needlocal
--        then [MSCIL.Variable_Variable MSCIL.Type_Object Nothing]
--        else []
  | Case branches.templocal = @lhs.localoffset
  | Case lhs.classes =
      (
        MSCIL.Class_Class
          ["public","auto","ansi"]
          @loc.classname
          Nothing
          []
          @branches.methods
      )
      : @branches.classes
  | Case lhs.instr =
      @branches.instr ++
      ( if @branches.hasDefault
          then []
          else
            (
              (debugOutputInstrs $ "ERROR: Case fallthrough, none of the cases matched the value at case switch " ++ (show @loc.currentNumber)) ++
              [ MSCIL.Instruction_Ret ]
            )
      ) ++
      @branches.finalinstr

ATTR CCaseBranch CCaseBranchL CCasePattern [ | | hasDefault USE {||} {False} : {Bool} ]
SEM CCasePattern
  | Default lhs.hasDefault = True

ATTR CCaseBranch CCaseBranchL CCasePattern [ | | classes USE {++} {[]} : {MSCIL.ClassL} ]
ATTR CCaseBranch CCaseBranchL [ valenv : {EnvironmentKey} | | ]
ATTR CCaseBranch CCaseBranchL [ env : {Environment} | | ]
ATTR CCaseBranch [ | | instr : {MSCIL.InstructionL} maxstack : {Int} ]
ATTR CCaseBranch [ | | finalinstr : {MSCIL.InstructionL} ]
ATTR CCaseBranchL [ | | instr USE {++} {[]} : {MSCIL.InstructionL} maxstack USE {max} {0} : {Int} ]
ATTR CCaseBranchL [ | | finalinstr USE {++} {[]} : {MSCIL.InstructionL} ]
ATTR CCaseBranch CCaseBranchL [ classname : {MSCIL.Identifier} index : {Int} | | ]
SEM CCaseBranchL
  | Cons tl.index = @lhs.index + 1
SEM CCaseBranch
  | CaseBranch loc.methodname = MSCIL.Identifier_Simple $ "branch" ++ (show @lhs.index)
  | CaseBranch pat.method = MSCIL.Identifier_DoubleDot @lhs.classname @loc.methodname
  | CaseBranch loc.upvalues = Set.toList @body.freevars
  | CaseBranch pat.bodyupvalues = @loc.upvalues
  | CaseBranch body.localoffset = 0
  | CaseBranch body.env = Map.fromList $ zip @loc.upvalues (map Argument [0..])
  | CaseBranch lhs.instr = @pat.instr
  | CaseBranch lhs.finalinstr = @pat.finalinstr
  | CaseBranch lhs.maxstack = @pat.maxstack

ATTR CCaseBranch [ | | methods : {MSCIL.Method} ]
ATTR CCaseBranchL [ | | methods USE {:} {[]} : {MSCIL.MethodL} ]
SEM CCaseBranch
  | CaseBranch lhs.methods =
      MSCIL.Method_Method
        ["public","static"]
        MSCIL.Type_Void
        @loc.methodname
        (map keyToVariable @loc.upvalues)
        (
          [ MSCIL.Instruction_PseudoMaxStack @body.maxstack
          , MSCIL.Instruction_PseudoLocals @body.locals
          ] ++
          @body.instr
        )

ATTR CCasePattern [ | | instr : {MSCIL.InstructionL} maxstack : {Int} ]
ATTR CCasePattern [ | | finalinstr : {MSCIL.InstructionL} ]
ATTR CCasePattern [ valenv : {EnvironmentKey} | | ]
ATTR CCasePattern [ index : {Int} | | ]
ATTR CCasePattern [ method : {MSCIL.Identifier} upvalues : {[EnvironmentKey]} | | ]
ATTR CCasePattern [ env : {Environment} | | ]
ATTR CCasePattern [ bodyupvalues : {[EnvironmentKey]} | | ]
SEM CCasePattern
  | Default (loc.upvalueinstr, loc.upvaluemaxstack) = unzip $ map (readEnv @lhs.env) @lhs.bodyupvalues
  | Default lhs.instr = 
      (concat @loc.upvalueinstr) ++ 
      [ MSCIL.Instruction_Tail
      , MSCIL.Instruction_Call [] MSCIL.Type_Void @lhs.method (map keyToVariable @lhs.bodyupvalues)
      , MSCIL.Instruction_Ret
      ]
  | Default lhs.finalinstr = []
  | Default lhs.maxstack = foldl max (length @lhs.bodyupvalues) (zipWith (+) @loc.upvaluemaxstack [0..])
  | Tag lhs.tags = Set.singleton (@tag, length @args)
  | Tag (loc.valinstr, loc.valmaxstack) = readEnv @lhs.env @lhs.valenv
  | Tag loc.classname = tagClassName @tag $ length @args
  | Tag loc.label = "Branch" ++ (show @lhs.index)
  | Tag loc.valloc = fromJust $ Map.lookup @lhs.valenv @lhs.env
  | Tag loc.fieldnames = map asKey @args
  | Tag loc.fieldvars = map keyToVariable @loc.fieldnames
  | Tag loc.fieldtypes = map keyToType @loc.fieldnames
  | Tag loc.fieldlocs =
      map
        (\(index,t) ->
          Field
            @loc.valloc
            (tagMemberVar @tag (length @args) index)
        )
        (zip [1..] @loc.fieldtypes)
  | Tag loc.fieldenv = Map.fromList $ zip @loc.fieldnames @loc.fieldlocs
  | Tag loc.restenv =
      case @rest of
        Nothing -> Map.empty
        Just restname -> Map.singleton (asKey restname) @loc.valloc
  | Tag loc.newenv = @loc.restenv `Map.union` @loc.fieldenv `Map.union` @lhs.env
  | Tag (loc.upvalueinstr, loc.upvaluemaxstack) = unzip $ map (readEnv @loc.newenv) @lhs.bodyupvalues
  | Tag lhs.instr =
      @loc.valinstr
      ++
      [ MSCIL.Instruction_IsInst @loc.classname
      , MSCIL.Instruction_BrTrue @loc.label
      ]
  | Tag lhs.finalinstr =
      [ MSCIL.Instruction_Label @loc.label ] ++
      (concat @loc.upvalueinstr) ++
      [ MSCIL.Instruction_Tail
      , MSCIL.Instruction_Call [] MSCIL.Type_Void @lhs.method (map keyToVariable @lhs.bodyupvalues)
      , MSCIL.Instruction_Ret
      ]
  | Tag lhs.maxstack = foldl max (length @lhs.bodyupvalues) $ @loc.valmaxstack : (zipWith (+) @loc.upvaluemaxstack [0..])

----
-- Free and bound variables
----
-- Should go in a shared AG file.
ATTR CTm CVal [ | | freevars : {Set.Set EnvironmentKey} ]
ATTR CThunkBind CThunkBindL [ | | freevars USE {Set.union} {Set.empty} : {Set.Set EnvironmentKey} boundvars USE {Set.union} {Set.empty} : {Set.Set EnvironmentKey} ]
SEM CTm
  | LetVal lhs.freevars = @bindvalue.freevars `Set.union` (Set.delete (asKey @bindname) @body.freevars)
  | LetCont lhs.freevars = (Set.delete @loc.valueenv @bindbody.freevars) `Set.union` (Set.delete @loc.contenv @body.freevars)
  -- Let op, alleen let thunk kan recursief zijn eigen binds zien.
  | LetThunk lhs.freevars = (@binds.freevars `Set.union` @body.freevars) `Set.difference` @binds.boundvars
  | ContAppl lhs.freevars = Set.fromList [asKey @cont, asKey @val]
  | ThunkEval lhs.freevars = Set.fromList [asKey @thunk, asKey @cont]
  | FuncAppl lhs.freevars = Set.fromList [asKey @func, asKey @cont, asKey @arg]
  | Exit lhs.freevars = Set.fromList [asKey @val]
  | Case lhs.freevars = @branches.freevars

SEM CVal
  | IntVal StringVal lhs.freevars = Set.empty
  | LamVal lhs.freevars = @body.freevars `Set.difference` (Set.fromList [asKey @bindcont, asKey @bindarg])
  | TagVal lhs.freevars = Set.fromList $ map asKey @args

SEM CThunkBind
  | ThunkBind lhs.boundvars = Set.fromList [asKey @thunkname]
  | ThunkBind lhs.freevars = Set.delete (asKey @contname) @body.freevars

ATTR CCasePattern [ | | boundvars : {Set.Set EnvironmentKey} ]
SEM CCasePattern
  | Default lhs.boundvars = Set.empty
  | Tag loc.restboundvars =
      case @rest of
        Nothing -> Set.empty
        Just x -> Set.singleton $ asKey x
  | Tag lhs.boundvars = @loc.restboundvars `Set.union` (Set.fromList $ map asKey @args)
  | Int lhs.boundvars = Set.empty

ATTR CCaseBranch [ | | boundvars : {Set.Set EnvironmentKey} ]
ATTR CCaseBranch [ | | freevars : {Set.Set EnvironmentKey} ]
ATTR CCaseBranchL [ | | boundvars USE {Set.union} {Set.empty} : {Set.Set EnvironmentKey} ]
ATTR CCaseBranchL [ | | freevars USE {Set.union} {Set.empty} : {Set.Set EnvironmentKey} ]
SEM CCaseBranch
  | CaseBranch loc.boundvars = @pat.boundvars
  | CaseBranch lhs.freevars = @body.freevars `Set.difference` @pat.boundvars
%%]
