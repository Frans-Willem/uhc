%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 core) hs module {%{EH}MSCIL} import()
%%]

%%[(8 core) hs export (Id(..), DottedName(..), DottedNameL(..), Decl(..), DeclL(..), AsmDecl(..), AsmDeclL(..), AsmRefDecl(..), AsmRefDeclL(..), ClassMember(..), ClassMemberL(..), ClassHeader(..), ClassAttr(..), ClassAttrL(..), FieldDecl(..), FieldAttr(..), FieldAttrL(..), Type(..), TypeL(..), TypeSpec(..), TypeSpecL(..), MbTypeSpec(..), TypeReference(..), ResolutionScope(..), MbResolutionScope(..), AssemblyRefName(..), MethodHeader(..), MethodName(..), Param(..), ParamL(..), ParamAttr(..), ParamAttrL(..), MethodBodyItem(..), MethodBodyItemL(..), Instruction(..), CallConv(..), MbCallConv(..), CallKind(..), Local(..), MbId(..), LocalL(..), MethAttr(..), MethAttrL(..))
%%]

%%[(8 core) ag import({MSCIL/AbsSyn})
%%]

%%[(8 core) hs export (stringToId, stringToDottedName, stringToMethodName, typeToParam, idToType, idToTypeSpec, typeToTypeSpec, stringToAssemblyRefName)

typeToParam :: Type -> Param
typeToParam t = Param_Param [] t Nothing

stringToId :: String -> Id
stringToId = Id_Id

stringToDottedName :: String -> DottedName
stringToDottedName = (:[]) . stringToId

stringToMethodName :: String -> MethodName
stringToMethodName = MethodName_Name . stringToDottedName

idToType :: Id -> Type
idToType = Type_Class . (TypeReference_Ref Nothing) . (:[]) . (:[])


typeToTypeSpec :: Type -> TypeSpec
typeToTypeSpec = TypeSpec_Type

idToTypeSpec :: Id -> TypeSpec
idToTypeSpec = typeToTypeSpec . idToType

stringToAssemblyRefName :: String -> AssemblyRefName
stringToAssemblyRefName = AssemblyRefName_AssemblyRefName . stringToDottedName

%%]
%%[(8 core) hs export(classHeader, methodHeader, ctorHeader, callConv_Instance)

callConv_Instance :: CallConv
callConv_Instance = CallConv_CallConv True False CallKind_Default

class CreateMethodHeader a where
  methodHeader :: a
instance CreateMethodHeader (MethAttrL -> MbCallConv -> Type -> MethodName -> ParamL -> MethodHeader) where
  methodHeader =
    MethodHeader_MethodHeader
instance CreateMethodHeader (MethAttrL -> Type -> MethodName -> ParamL -> MethodHeader) where
  methodHeader attr ty nm param = methodHeader attr (Nothing :: MbCallConv) ty nm param
instance CreateMethodHeader (Type -> MethodName -> ParamL -> MethodHeader) where
  methodHeader = methodHeader ([] :: MethAttrL)
instance CreateMethodHeader (MethodName -> ParamL -> MethodHeader) where
  methodHeader = methodHeader Type_Void
instance CreateMethodHeader (MethodName -> MethodHeader) where
  methodHeader nm = methodHeader nm ([] :: ParamL)

ctorHeader :: ParamL -> MethodHeader
ctorHeader = 
  MethodHeader_MethodHeader
    [MethAttr_Public, MethAttr_SpecialName, MethAttr_RtSpecialName]
    (Just $ callConv_Instance)
    Type_Void
    MethodName_Ctor

class CreateClassHeader a where
  classHeader :: a
instance CreateClassHeader (Id -> ClassHeader) where
  classHeader = classHeader ([] :: ClassAttrL)
instance CreateClassHeader (ClassAttrL -> Id -> ClassHeader) where
  classHeader attr nm = classHeader attr nm ([] :: TypeSpecL)
instance CreateClassHeader (ClassAttrL -> Id -> TypeSpecL -> ClassHeader) where
  classHeader =
    ClassHeader_ClassHeader
%%]

%%[(8 core) hs export(instrRet, instrLdArg, instrLdStr, instrLdcI4, instrLdNull, instrLdLoc, instrStLoc, instrLdFld, instrStFld, instrTail, instrCall, instrCallVirt, instrNewObj, instrBox, instrUnboxAny, instrIsInst, instrPop, instrBrFalse, instrBrTrue)

instrRet :: MethodBodyItem
instrRet = MethodBodyItem_Instr Instruction_Ret

instrLdArg :: Int -> MethodBodyItem
instrLdArg = MethodBodyItem_Instr . Instruction_LdArg

instrLdStr :: String -> MethodBodyItem
instrLdStr = MethodBodyItem_Instr . Instruction_LdStr

instrLdcI4 :: Int -> MethodBodyItem
instrLdcI4 = MethodBodyItem_Instr . Instruction_LdcI4

instrLdNull :: MethodBodyItem
instrLdNull = MethodBodyItem_Instr Instruction_LdNull

instrLdLoc :: Int -> MethodBodyItem
instrLdLoc = MethodBodyItem_Instr . Instruction_LdLoc
instrStLoc :: Int -> MethodBodyItem
instrStLoc = MethodBodyItem_Instr . Instruction_StLoc

instrLdFld :: Type -> TypeSpec -> Id -> MethodBodyItem
instrLdFld ty cls i = MethodBodyItem_Instr $ Instruction_LdFld ty cls i
instrStFld :: Type -> TypeSpec -> Id -> MethodBodyItem
instrStFld ty cls i = MethodBodyItem_Instr $ Instruction_StFld ty cls i

instrTail :: MethodBodyItem
instrTail = MethodBodyItem_Instr Instruction_Tail

instrCall :: CallConv -> Type -> MbTypeSpec -> MethodName -> ParamL -> MethodBodyItem
instrCall conv ret tysp name params = MethodBodyItem_Instr $ Instruction_Call conv ret tysp name params
instrCallVirt :: CallConv -> Type -> MbTypeSpec -> MethodName -> ParamL -> MethodBodyItem
instrCallVirt conv ret tysp name params = MethodBodyItem_Instr $ Instruction_CallVirt conv ret tysp name params
instrNewObj :: CallConv -> Type -> MbTypeSpec -> MethodName -> ParamL -> MethodBodyItem
instrNewObj conv ret tysp name params = MethodBodyItem_Instr $ Instruction_NewObj conv ret tysp name params

instrBox :: TypeSpec -> MethodBodyItem
instrBox = MethodBodyItem_Instr . Instruction_Box

instrUnboxAny :: TypeSpec -> MethodBodyItem
instrUnboxAny = MethodBodyItem_Instr . Instruction_UnboxAny

instrIsInst :: TypeSpec -> MethodBodyItem
instrIsInst = MethodBodyItem_Instr . Instruction_IsInst

instrPop :: MethodBodyItem
instrPop = MethodBodyItem_Instr Instruction_Pop

instrBrFalse :: Id -> MethodBodyItem
instrBrFalse = MethodBodyItem_Instr . Instruction_BrFalse

instrBrTrue :: Id -> MethodBodyItem
instrBrTrue  = MethodBodyItem_Instr . Instruction_BrTrue
%%]

%%[(8 core) hs export(typeSpec2type, typeClass, callConvDefault)
typeSpec2type :: TypeSpec -> Maybe Type
typeSpec2type (TypeSpec_Ref ref) = Just $ Type_Class ref
typeSpec2type (TypeSpec_Type ty) = Just ty
typeSpec2type (TypeSpec_External _) = Nothing

typeClass :: TypeReference -> Type
typeClass = Type_Class

callConvDefault :: CallConv
callConvDefault = CallConv_CallConv False False CallKind_Default
%%]
