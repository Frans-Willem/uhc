%%[0 lhs2tex
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 core) hs module {%{EH}MSCIL} import({%{EH}Base.HsName})
%%]

%%[(8 core) hs export (Id(..), DottedName(..), DottedNameL(..), Decl(..), DeclL(..), AsmDecl(..), AsmDeclL(..), AsmRefDecl(..), AsmRefDeclL(..), ClassHeader(..), ClassAttr(..), ClassAttrL(..), ClassMember(..), ClassMemberL(..), FieldDecl(..), FieldAttr(..), FieldAttrL(..), Type(..), TypeSpec(..), TypeSpecL(..), MbTypeSpec(..), TypeReference(..), ResolutionScope(..), MbResolutionScope(..), AssemblyRefName(..), MethodHeader(..), MethodName(..), Param(..), ParamL(..), ParamAttr(..), ParamAttrL(..), MethodBodyItem(..), MethodBodyItemL(..), Instruction(..), CallConv(..), MbCallConv(..), CallKind(..), Local(..), MbId(..), LocalL(..), MethAttr(..), MethAttrL(..))
%%]

%%[(8 core) ag import({MSCIL/AbsSyn})
%%]

%%[(8 core) hs export (asId, asDottedName)
class (AsDottedName a, AsDottedName [a]) => AsId a where
  asId :: a -> Id
instance AsId Id where asId = id
instance AsId String where asId = Id_Id
instance AsId HsName where asId nm = Id_Id (show nm)
instance AsDottedName Id where asDottedName = (:[]) . asId
instance AsDottedName String where asDottedName = (:[]) . asId
instance AsDottedName HsName where asDottedName = (:[]) . asId
instance AsMethodName Id where asMethodName = MethodName_Name . asDottedName
instance AsMethodName String where asMethodName = MethodName_Name . asDottedName
instance AsMethodName HsName where asMethodName = MethodName_Name . asDottedName
instance AsL DottedName Id where asList = (:[]) . asDottedName
instance AsL DottedName String where asList = (:[]) . asDottedName
instance AsL DottedName HsName where asList = (:[]) . asDottedName
instance AsTypeReference Id where asTypeReference r = TypeReference_Ref Nothing (asList r)
instance AsTypeReference String where asTypeReference r = TypeReference_Ref Nothing (asList r)
instance AsTypeReference HsName where asTypeReference r = TypeReference_Ref Nothing (asList r)
instance AsType Id where asType = Type_Class . asTypeReference
instance AsType String where asType = Type_Class . asTypeReference
instance AsType HsName where asType = Type_Class . asTypeReference
instance AsParam Id where asParam t = Param_Param [] (asType t) Nothing
instance AsParam String where asParam t = Param_Param [] (asType t) Nothing
instance AsParam HsName where asParam t = Param_Param [] (asType t) Nothing
instance AsL Param [Id] where asList = map asParam
instance AsL Param [String] where asList = map asParam
instance AsL Param [HsName] where asList = map asParam
instance AsDottedName [Id] where asDottedName = map asId
instance AsDottedName [String] where asDottedName = map asId
instance AsDottedName [HsName] where asDottedName = map asId
instance AsMethodName [Id] where asMethodName = MethodName_Name . asDottedName
instance AsMethodName [String] where asMethodName = MethodName_Name . asDottedName
instance AsMethodName [HsName] where asMethodName = MethodName_Name . asDottedName
instance AsL DottedName [Id] where asList = map asDottedName
instance AsL DottedName [String] where asList = map asDottedName
instance AsL DottedName [HsName] where asList = map asDottedName
instance AsL DottedName [[Id]] where asList = map asDottedName
instance AsL DottedName [[String]] where asList = map asDottedName
instance AsL DottedName [[HsName]] where asList = map asDottedName
instance AsTypeReference [Id] where asTypeReference n = TypeReference_Ref Nothing [asDottedName n]
instance AsTypeReference [String] where asTypeReference n = TypeReference_Ref Nothing [asDottedName n]
instance AsTypeReference [HsName] where asTypeReference n = TypeReference_Ref Nothing [asDottedName n]
instance AsType [Id] where asType = Type_Class . asTypeReference
instance AsType [String] where asType = Type_Class . asTypeReference
instance AsType [HsName] where asType = Type_Class . asTypeReference
instance AsParam [Id] where asParam t = Param_Param [] (asType t) Nothing
instance AsParam [String] where asParam t = Param_Param [] (asType t) Nothing
instance AsParam [HsName] where asParam t = Param_Param [] (asType t) Nothing
instance AsL Param [[Id]] where asList = map asParam
instance AsL Param [[String]] where asList = map asParam
instance AsL Param [[HsName]] where asList = map asParam


class (AsMethodName a, AsL DottedName a, AsL DottedName [a], AsTypeReference a) => AsDottedName a where
  asDottedName :: a -> DottedName
{-
instance AsDottedName DottedName where asDottedName = id
instance AsMethodName DottedName where asMethodName = MethodName_Name . asDottedName
instance AsL DottedName DottedName where asList = (:[]) . asDottedName
instance AsL DottedName [DottedName] where asList = map asDottedName
instance AsTypeReference DottedName where asTypeReference n = TypeReference_Ref Nothing (asList n)
instance AsType DottedName where asType = Type_Class . asTypeReference
instance AsParam DottedName where asParam t = Param_Param [] (asType t) Nothing
instance AsL Param [DottedName] where asList = map asParam 
-}

class (AsL MethAttr [a], AsL MethAttr a) => AsMethAttr a where
  asMethAttr :: a -> MethAttr
instance AsMethAttr MethAttr where
  asMethAttr = id
instance AsL MethAttr [MethAttr] where asList = map asMethAttr
instance AsL MethAttr MethAttr where asList = (:[]) . asMethAttr

class AsL a b where
  asList :: b -> [a]
instance AsL a () where
  asList _ = []

class AsMb CallConv a => AsCallConv a where
  asCallConv :: a -> CallConv
instance AsCallConv CallConv where
  asCallConv = id
instance AsMb CallConv CallConv where asMb = Just . id

class AsMb a b where
  asMb :: b -> Maybe a
instance AsMb a (Maybe a) where
  asMb = id
instance AsMb a () where
  asMb _ = Nothing

class AsCallConv a => AsCallKind a where
  asCallKind :: a -> CallKind
instance AsMb CallConv CallKind where asMb = Just . asCallConv . asCallKind
instance AsCallConv CallKind where asCallConv = (CallConv_CallConv False False) . asCallKind
instance AsCallKind CallKind where
  asCallKind = id

class (AsParam a) => AsType a where
  asType :: a -> Type
instance AsType Type where asType = id
instance AsParam Type where asParam n = Param_Param [] n Nothing
instance AsL Param [Type] where asList = map asParam

class AsMethodName a where
  asMethodName :: a -> MethodName
instance AsMethodName MethodName where asMethodName = id

class (AsL Param [a]) => AsParam a where
  asParam :: a -> Param
instance AsL Param [Param] where asList = map asParam
instance AsParam Param where asParam = id
instance (AsType t, AsId n) => AsParam (t,n) where asParam (t,n) = Param_Param [] (asType t) (Just $ asId n)
instance (AsType t, AsId n) => (AsL Param [(t,n)]) where asList = map asParam

class (AsL ClassAttr [a]) => AsClassAttr a where
  asClassAttr :: a -> ClassAttr
instance AsClassAttr ClassAttr where
  asClassAttr = id
instance (AsL ClassAttr [ClassAttr]) where asList = map asClassAttr

class (AsL TypeSpec [a]) => AsTypeSpec a where
  asTypeSpec :: a -> TypeSpec
instance AsTypeSpec TypeSpec where asTypeSpec = id
instance (AsL TypeSpec [TypeSpec]) where asList = map asTypeSpec

class (AsType a) => AsTypeReference a where
  asTypeReference :: a -> TypeReference
instance AsTypeReference TypeReference where asTypeReference = id
instance AsType TypeReference where asType = Type_Class . asTypeReference
instance AsParam TypeReference where asParam r = Param_Param [] (asType $ asTypeReference r) Nothing
instance AsL Param TypeReference where asList = (:[]) . asParam
instance AsL Param [TypeReference] where asList = map asParam

class AsMethodBodyItem a where
  asMethodBodyItem :: a -> MethodBodyItem
instance AsMethodBodyItem MethodBodyItem where asMethodBodyItem = id

class (AsMethodBodyItem a) => AsInstruction a where
  asInstruction :: a -> Instruction
instance AsInstruction Instruction where asInstruction = id
instance AsMethodBodyItem Instruction where asMethodBodyItem = MethodBodyItem_Instr . asInstruction
%%]
%%[(8 core) hs export(classHeader, methodHeader, ctorHeader, callConv_Instance)

callConv_Instance :: CallConv
callConv_Instance = CallConv_CallConv True False CallKind_Default

class CreateMethodHeader a where
  methodHeader :: a
instance (AsL MethAttr attr, AsMb CallConv cc, AsType ty, AsMethodName nm, AsL Param param) => CreateMethodHeader (attr -> cc -> ty -> nm -> param -> MethodHeader) where
  methodHeader attr cc ty nm param =
    MethodHeader_MethodHeader
      (asList attr)
      (asMb cc)
      (asType ty)
      (asMethodName nm)
      (asList param)
instance (AsL MethAttr attr, AsType ty, AsMethodName nm, AsL Param param) => CreateMethodHeader (attr -> ty -> nm -> param -> MethodHeader) where
  methodHeader attr ty nm param = methodHeader attr (Nothing :: MbCallConv) ty nm param
instance (AsType ty, AsMethodName nm, AsL Param param) => CreateMethodHeader (ty -> nm -> param -> MethodHeader) where
  methodHeader = methodHeader ([] :: MethAttrL)
instance (AsMethodName nm, AsL Param param) => CreateMethodHeader (nm -> param -> MethodHeader) where
  methodHeader = methodHeader Type_Void
instance (AsMethodName nm) => CreateMethodHeader (nm -> MethodHeader) where
  methodHeader nm = methodHeader nm ([] :: ParamL)

ctorHeader :: (AsL Param a) => a -> MethodHeader
ctorHeader params = 
  MethodHeader_MethodHeader
    [MethAttr_Public, MethAttr_SpecialName, MethAttr_RtSpecialName]
    (Just $ callConv_Instance)
    Type_Void
    MethodName_Ctor
    (asList params)

class CreateClassHeader a where
  classHeader :: a
instance (AsId nm) => CreateClassHeader (nm -> ClassHeader) where
  classHeader = classHeader ([] :: ClassAttrL)
instance (AsL ClassAttr attr, AsId nm) => CreateClassHeader (attr -> nm -> ClassHeader) where
  classHeader attr nm = classHeader attr nm ([] :: TypeSpecL)
instance (AsL ClassAttr attr, AsId nm, AsL TypeSpec tysp) => CreateClassHeader (attr -> nm -> tysp -> ClassHeader) where
  classHeader attr nm tysp =
    ClassHeader_ClassHeader
      (asList attr)
      (asId nm)
      (asList tysp)
%%]

%%[(8 core) hs export(instrRet, instrLdLoc, instrLdArg, instrLdFld, instrLdNull, instrLdStr, instrCall)

instrRet = asMethodBodyItem Instruction_Ret
instrLdLoc = asMethodBodyItem . Instruction_LdLoc
instrLdArg = asMethodBodyItem . Instruction_LdArg
instrLdFld = error "TODO: instrLdFld"
instrLdNull = asMethodBodyItem Instruction_LdNull
instrLdStr = asMethodBodyItem . Instruction_LdStr
instrCall = error "TODO: instrCall"
{-
instrRet :: MethodBodyItem
instrRet = cast Instruction_Ret
instrLdLoc :: Int -> MethodBodyItem
instrLdLoc = cast Instruction_LdLoc
instrLdArg :: Int -> MethodBodyItem
instrLdArg = cast Instruction_LdArg
instrLdFld :: (Castable a Type, Castable b TypeSpec, Castable c Id) => a -> b -> c -> MethodBodyItem
instrLdFld = cast Instruction_LdFld
instrLdNull :: MethodBodyItem
instrLdNull = cast Instruction_LdNull
instrLdStr :: String -> MethodBodyItem
instrLdStr = cast Instruction_LdStr
instrCall :: (Castable a CallConv, Castable b Type, Castable c (Maybe TypeSpec), Castable d MethodName, Castable e ParamL) => a -> b -> c -> d -> e -> MethodBodyItem
instrCall = cast Instruction_Call
-}
%%]

%%[(8 core) hs export(typeSpec2type, typeClass)
typeSpec2type :: TypeSpec -> Maybe Type
typeSpec2type (TypeSpec_Ref ref) = Just $ Type_Class ref
typeSpec2type (TypeSpec_Type ty) = Just ty
typeSpec2type (TypeSpec_External _) = Nothing

typeClass :: (AsTypeReference a) => a -> Type
typeClass = Type_Class . asTypeReference
%%]
